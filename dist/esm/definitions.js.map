{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,CAAN,IAAY,cAeX;AAfD,WAAY,cAAc;IACtB,iCAAe,CAAA;IACf,yCAAuB,CAAA;IACvB,yCAAuB,CAAA;IACvB,yCAAuB,CAAA;IACvB,uCAAqB,CAAA;IACrB,2CAAyB,CAAA;IACzB,6CAA2B,CAAA;IAC3B,2CAAyB,CAAA;IACzB,uCAAqB,CAAA;IACrB,mCAAiB,CAAA;IACjB,yCAAuB,CAAA;IACvB,yCAAuB,CAAA;IACvB,yCAAuB,CAAA;IACvB,2CAAyB,CAAA;AAC7B,CAAC,EAfW,cAAc,KAAd,cAAc,QAezB","sourcesContent":["/**\n * List of built in keywords provided by Porcupine.\n */\nexport enum BuiltInKeyword {\n    ALEXA = \"ALEXA\",\n    AMERICANO = \"AMERICANO\",\n    BLUEBERRY = \"BLUEBERRY\",\n    BUMBLEBEE = \"BUMBLEBEE\",\n    COMPUTER = \"COMPUTER\",\n    GRAPEFRUIT = \"GRAPEFRUIT\",\n    GRASSHOPPER = \"GRASSHOPPER\",\n    HEY_GOOGLE = \"HEY_GOOGLE\",\n    HEY_SIRI = \"HEY_SIRI\",\n    JARVIS = \"JARVIS\",\n    OK_GOOGLE = \"OK_GOOGLE\",\n    PICOVOICE = \"PICOVOICE\",\n    PORCUPINE = \"PORCUPINE\",\n    TERMINATOR = \"TERMINATOR\"\n}\n\nexport interface BuiltInKeywordInitOption {\n    /**\n     * Built in keyword to listen for (keyword provided by Porcupine).\n     */\n    keyword: BuiltInKeyword\n\n    /** \n     * Sensitivity is the parameter that enables trading miss rate for the false alarm rate.\n     * This is a floating-point number within [0, 1]. A higher sensitivity reduces the miss rate at the cost of increased false alarm rate.\n     *\n     * @default 0.5\n     */\n    sensitivity?: number\n}\n\nexport interface KeywordPathInitOption {\n    /**\n     * Path to the trained model for the given keyword to listen for.\n     */\n    keywordPath: string\n\n    /** \n     * Sensitivity is the parameter that enables trading miss rate for the false alarm rate.\n     * This is a floating-point number within [0, 1]. A higher sensitivity reduces the miss rate at the cost of increased false alarm rate.\n     *\n     * @default 0.5\n     */\n    sensitivity?: number\n}\n\nexport interface InitOptions {\n    /**\n     * Picovoice access key. The access key acts as your credentials when using Porcupine SDKs. \n     * You can get your access key for free. Make sure to keep your access key secret. \n     * Signup or Login to Picovoice Console (https://console.picovoice.ai/) to get your access key.\n     */\n    accessKey: string\n\n    /**\n     * The model file contains the parameters for the wake word engine. \n     * To change the language that Porcupine understands, you'll pass in a different model file.\n     * By default, Porcupine will use a model file for the English language.\n     */\n    modelPath?: string\n}\n\nexport interface KeywordPathInitOptions extends InitOptions {\n    keywordPathOpts: KeywordPathInitOption[]\n}\n\nexport interface BuiltInKeywordInitOptions extends InitOptions {\n    keywordOpts: BuiltInKeywordInitOption[]\n}\n\nexport interface KeywordEventData {\n    /**\n     * The index of the keyword (index taken from the array passed during the initiliazation of Porcupine)\n     * that has been detected.\n     */\n    index: number\n}\n\nexport interface ErrorEventData {\n    /**\n     * The message of the error.\n     */\n    message: string\n}\n\nexport interface PermissionBool {\n    /**\n     * Permission state for record_audio alias.\n     */\n    hasPermission: boolean\n}\n\nexport interface PermissionStatus {\n    /**\n     * Permission state for record_audio alias.\n     */\n    record_audio: PermissionState\n}\n\nexport interface ValueResult<T> {\n    value: T\n}\n\nexport interface PorcupineWakeWordPlugin {\n    /**\n     * Initialize Porcupine from built in keywords.\n     *\n     * Rejects:\n     * - JSONException: if there is an error while decoding the JSON from the method parameter.\n     * - PorcupineException: if there is an error while initializing Porcupine.\n     *\n     * Resolves when Porcupine finished its initialization.\n     */\n    initFromBuiltInKeywords(options: BuiltInKeywordInitOptions): Promise<void>\n\n    /**\n     * Initialize Porcupine from custom keywords (path of trained models of keywords).\n     *\n     * Rejects:\n     * - JSONException: if there is an error while decoding the JSON from the method parameter.\n     * - PorcupineException: if there is an error while initializing Porcupine.\n     *\n     * Resolves when Porcupine finished its initialization.\n     */\n    initFromCustomKeywords(options: KeywordPathInitOptions): Promise<void>\n\n    /**\n     * Starts recording audio from the microphone and monitors it for the utterances of the given set of keywords.\n     *\n     * Rejects from native Porcupine iOS sdk:\n     * - If porcupine is not initialized.\n     * - If the user has not granted the record_audio permission.\n     *\n     * Rejects:\n     * - If porcupine is not initialized.\n     * - If the user has not granted the record_audio permission.\n     *\n     * Resolves when the recording from the microphone has started, hence Porcupine listening for the utterances of the given set of keywords.\n     */\n    start(): Promise<void>\n\n    /**\n     * Stops recording audio from the microphone. Hence, stop listening for wake words.\n     *\n     * Rejects from native Porcupine Android sdk:\n     * - PorcupineException message: if the PorcupineManager.MicrophoneReader throws an exception while it's being stopped.\n     *\n     * Resolves when the recording from the microphone has stopped.\n     */\n    stop(): Promise<void>\n\n    /**\n     * Releases resources acquired by Porcupine. It should be called when disposing the object.\n     * Resolves when resources acquired by Porcupine have been released.\n     */\n    delete(): Promise<void>\n\n    /**\n     * Register a callback function to run if errors occur while processing audio frames.\n     */\n    addListener(eventName: \"error\", listenerFunc: (data: ErrorEventData) => void): void\n\n    /**\n     * Register a callback function that is invoked upon detection of the keywords specified during the initialization of Porcupine.\n     */\n    addListener(eventName: \"keywordDetected\", listenerFunc: (data: KeywordEventData) => void): void\n\n    /**\n     * Remove all registered callback functions.\n     */\n    removeAllListeners(): Promise<void>\n\n    /**\n     * Check if the user has granted the record_audio permission.\n     */\n    hasPermission(): Promise<PermissionBool>\n\n    /**\n     * Check record_audio permission.\n     */\n    checkPermission(): Promise<PermissionStatus>\n\n    /**\n     * Request record_audio permission.\n     * Resolves with the new permission status after the user has denied/granted the request.\n     */\n    requestPermission(): Promise<PermissionStatus>\n\n    /**\n     * Returns true if the plugin is listening for wake words, false otherwise.\n     */\n    isListening(): Promise<ValueResult<boolean>>\n\n    /**\n     * Returns true if the plugin is initialized, false otherwise.\n     */\n    isInitialized(): Promise<ValueResult<boolean>>\n}\n\n"]}